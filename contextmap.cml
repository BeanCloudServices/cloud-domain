UserStory US1_ObjectStorageBucket {
  As a "Solo Web Developer creating a personal blog"
  As a "Project Lead of a Project creating a monolithic web app"
    I want to "create" a "Project" for a "CloudAccount"
    I want to "create" an "ObjectStorageBucket" with its "ProductionURL" for the "Project"
  so that "I can use SFTP protocol to upload files to the bucket in a specified project environment."
  so that "the ProductionURL can be accessed by authorised parties per environment."  
}

UserStory US2_StaticWebHostingForSoloWebDeveloper {
  As an "Solo Web Developer creating a personal blog"
    I want to "deploy" a "WebAssetArchive" with its "ProductionURL", "environment" // attributes are optional ('with its' part)
//    I want to "deploy" a "WebAssetArchive" with its "URL", "environment" // attributes are optional ('with its' part)    
//    I want to "update" an "Address" for a "Customer" // reference is optional ('for a' part)
//    I want to "offer" a "Contract" for a "Customer" // reference is optional ('for a' part)    
  so that "I can use SFTP protocol to upload files to the bucket in a specified project environment."
  so that "I can attach it to a WebFront route and it can be accessed by authorised parties per environment."  
}

/* Domain & Subdomain Definitions */
Domain BeanCloudDomain {
	Subdomain BillingDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Support different cost and pricing models for survival"
	}

	Subdomain MarketplaceDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Where the money flows"
	}
	
	Subdomain CloudAdminDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "
			A BeanCloud is a Cloud-As-A-Service (CAAS) cloud that can host other cloud platforms each of which is a decoupled platform cloud itself.
			A cloud account, aka. cloud platform manages cloud users and their associated roles. 
			Each cloud account is also a cloud user with superuser role on its own.
			A cloud user with superuser role manages other cloud users and CaaS configuration.
			A cloud user can also create other cloud accounts.
			A Cloud also maintains a pool of domain names to be associated to projects.
		"
    Entity CloudAccount {
      - CloudProject project
    }
    Entity CloudProject {
      - CloudAccount account
      String name
    }
    Entity CloudUser {
      - CloudAccount account
      String email
      Boolean isSuperUser
    }
    Entity DomainName {
      - CloudAccount account
      - CloudProject project
      String fqdn key
    }
	}
	
	Subdomain ProjectAccessDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "
			Manage who is a member and what can the member do at what time.
      A cloud user with projectowner role manages cloud projects, project members and project resources.
			what resources belong to what project,
      in a DDD manner.
		"
    Entity Project {
      - CloudAccount account
      String name
    }
    Entity ProjectMember {
      String email
      Boolean isOwner
    }
    Entity ProjectTeam {
    }
    Entity TeamMember {
    }
    Entity BoundedContext {
      - ProjectTeam team
      String name
    }
	}

	Subdomain ProjectEnvironmentDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "
			How many environments do we have and what semantics does each environment have ?
			Handle deployment process.
			Should the environment support Canary or A/B Testings ?
		"
		Entity ProjectEnvironment {
		  Boolean isEphemeral
		}
	}

	Subdomain ProjectGatewayDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "
		  Public/Private/Internal Gateway, ZeroTrust framework,
		  Authen and Author,
		  Routing Specs including Canary and A/B Testing.
		"
		Entity ProjectGateway {}
		Entity ProjectRoute {}
		enum GatewayType {
      PUBLIC,
      PRIVATE
    }
	}

	Subdomain ServiceMeshDomain {
    type = SUPPORTING_DOMAIN
    domainVisionStatement = "
      Only services within the same mesh can talk to each other.
      External services even in the same Project have to talk to a mesh gateway and not directly to internal services.
      Traffic from outside the Project cannot have direct access to MeshGateway or MeshService but has to go through a ProjectGateway.
    "
    Entity ServiceMesh {
      - ProjectId projectId
      - ServiceMesh parent /* Project level (top level) mesh has parent=null */
      - BoundedContextId boundedContextId
    }
    Entity MeshGateway {}
    Entity MeshRoute {}
    Entity ServiceRoute {
      - ComputeInstanceId destInstance
      - List<ComputeInstanceId> srcInstance
    }
	}

	Subdomain ComputeDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "CPU and RAM provisioning"
		Entity ComputeInstance {
		  - BoundedContextId boundedContextId
		} /* Could be service or job */
	}

	Subdomain WorkflowDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Tasks in a Directed Acyclic Graph"
		Entity DagDefinition {}
		Entity TaskDefinition {}
		Entity DagExecution {}
		Entity TaskExecution {}
	}

	Subdomain FileTransferDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "
		  To transfer files and folders from one Endpoint to another Endpoint
		"
    Service FileTransferService {
      deployWebAssetArchive()
      uploadFiles()
      downloadFiles()
      syncFiles()
    }
	}
	
	Subdomain StorageDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = ""
    Entity ObjectStorageBucket {
      String email
      Boolean isOwner
    }
	}
	
	Subdomain IdentityAndAccessManagementDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "
		Account Registration,
		Authentication,
		Authorisation using RBAC with roles defined by other subdomains
		"
	}
}

/* Example Context Map written with 'ContextMapper DSL' */
ContextMap BeanCloudContextMap {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	
	
	/* Add bounded contexts to this context map: */
	contains CustomerManagementContext
	contains CustomerSelfServiceContext
	contains PrintingContext
	contains PolicyManagementContext
	contains RiskManagementContext
	contains DebtCollection
	
	/* Define the context relationships: */ 

	CustomerSelfServiceContext <- CustomerManagementContext
	
	CustomerManagementContext <- PrintingContext
	
	PrintingContext -> PolicyManagementContext
	
	RiskManagementContext <-> PolicyManagementContext

	PolicyManagementContext <- CustomerManagementContext

	DebtCollection <- PrintingContext

	PolicyManagementContext <-> DebtCollection	
}
	
/* Bounded Context Definitions */
BoundedContext CustomerManagementContext implements CustomerManagementDomain

BoundedContext CustomerSelfServiceContext implements CustomerManagementDomain

BoundedContext PrintingContext implements PrintingDomain

BoundedContext PolicyManagementContext implements PolicyManagementDomain

BoundedContext RiskManagementContext implements RiskManagementDomain

BoundedContext DebtCollection implements DebtsDomain
